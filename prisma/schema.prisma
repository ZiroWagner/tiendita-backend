// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(EMPLOYEE)
  status    String   @default("active") // Nuevo campo para soft delete
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]
  profile   Profile?
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone     String?
  address   String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String       @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  unit        String?      // Unidad de medida (kg, g, l, ml, unidad, etc.)
  image       String?
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  status      String       @default("active") // Nuevo campo para soft delete
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  saleItems   SaleItem[]
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Sale {
  id           String       @id @default(uuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  total        Float
  status       SaleStatus   @default(COMPLETED)
  paymentMethod PaymentMethod
  isDeleted    Boolean      @default(false) // Nuevo campo para soft delete
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  items        SaleItem[]
}

model SaleItem {
  id        String   @id @default(uuid())
  saleId    String
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([saleId, productId])
}

enum Role {
  ADMIN
  EMPLOYEE
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
}
